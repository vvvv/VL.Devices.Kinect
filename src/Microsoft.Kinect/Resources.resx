<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BadIndex" xml:space="preserve">
    <value>A bad index or id was used when referencing a Kinect sensor.</value>
  </data>
  <data name="DepthFilterMustImplementNativeInterface" xml:space="preserve">
    <value>Depth filter must implement the native INuiDepthFilter interface</value>
  </data>
  <data name="UnauthorizedAccess" xml:space="preserve">
    <value>Could not access the hardware</value>
  </data>
  <data name="KinectInUse" xml:space="preserve">
    <value>Kinect is already in use in another process.</value>
  </data>
  <data name="InvalidEchoCancellationMode" xml:space="preserve">
    <value>Unexpected value for EchoCancellationMode</value>
  </data>
  <data name="FailedToGetDeviceName" xml:space="preserve">
    <value>Native DLL failed in get device name</value>
  </data>
  <data name="InvalidBeamAngleMode" xml:space="preserve">
    <value>Unexpected value for BeamAngleMode</value>
  </data>
  <data name="CaptureNotStarted" xml:space="preserve">
    <value>The capture has not been started</value>
  </data>
  <data name="KinectNotSupportedDeveloper" xml:space="preserve">
    <value>The Kinect sensor plugged into your computer is for use on the Xbox 360.
You may continue using your Xbox 360 Kinect sensor on your computer for development purposes.
Microsoft does not guarantee full compatibility for Kinect for Windows applications and the Xbox 360 Kinect Sensor.</value>
  </data>
  <data name="DepthStreamMustBeEnabled" xml:space="preserve">
    <value>This Depth Stream must be Enabled to get next Depth image frame. Call KinectSensor.DepthStream.Enable()</value>
  </data>
  <data name="NotSupported" xml:space="preserve">
    <value>The operation is not supported</value>
  </data>
  <data name="CannotPollAndUseEvents" xml:space="preserve">
    <value>This API cannot be called when an event listener has been set.</value>
  </data>
  <data name="ImageFormatNotSupported" xml:space="preserve">
    <value>The specified Image Format is not supported.</value>
  </data>
  <data name="KinectMustBeRunning" xml:space="preserve">
    <value>Kinect must be running to control the motor</value>
  </data>
  <data name="KinectNotSupportedNonDeveloper" xml:space="preserve">
    <value>The Kinect sensor plugged into your computer is for use on the Xbox 360.
To run a Kinect for Windows application, you must plug in a Kinect for Windows sensor.</value>
  </data>
  <data name="HardwareFeatureUnavailable" xml:space="preserve">
    <value>The feature is not supported by this version of the hardware</value>
  </data>
  <data name="IncorrectJointType" xml:space="preserve">
    <value>JointType index value must match Joint.JointType</value>
  </data>
  <data name="KinectNotReady" xml:space="preserve">
    <value>Kinect is not ready</value>
  </data>
  <data name="SensorMustBeRunningForAudio" xml:space="preserve">
    <value>KinectSensor must be running in order to start audio stream</value>
  </data>
  <data name="NoDevicesFound" xml:space="preserve">
    <value>Could not find a Kinect audio device</value>
  </data>
  <data name="UnexpectedUniqueDeviceName" xml:space="preserve">
    <value>Unexpected UniqueDeviceName format</value>
  </data>
  <data name="PixelBufferIncorrectLength" xml:space="preserve">
    <value>The data buffer length must match the length required by the associated ImageFormat.</value>
  </data>
  <data name="ColorStreamMustBeEnabled" xml:space="preserve">
    <value>The Color Stream must be Enabled to get next Color image frame. Call KinectSensor.ColorStream.Enable()</value>
  </data>
  <data name="NativeStreamCantBeZero" xml:space="preserve">
    <value>NativeStreamHandle can't be Zero</value>
  </data>
  <data name="CaptureAlreadyStarted" xml:space="preserve">
    <value>The capture has already been started</value>
  </data>
  <data name="SkeletonFrameNotDisposed" xml:space="preserve">
    <value>Warning: A SkeletonFrame instance was not Disposed.</value>
  </data>
  <data name="UnexpectedDepthRange" xml:space="preserve">
    <value>Unexpected depth range</value>
  </data>
  <data name="DeviceNotSupported" xml:space="preserve">
    <value>The attached Kinect device is not supported.</value>
  </data>
  <data name="SensorMustBeRunning" xml:space="preserve">
    <value>KinectSensor must be running to get next frame. Call KinectSensor.Start()</value>
  </data>
  <data name="NeedFeatureMode" xml:space="preserve">
    <value>Feature mode needs to be set to True before setting this property</value>
  </data>
  <data name="DeviceNotGenuine" xml:space="preserve">
    <value>The attached Kinect device is not genuine.</value>
  </data>
  <data name="SkeletonEngineMustBeEnabled" xml:space="preserve">
    <value>SkeletonEngine must be Enabled to get next skeleton frame. Call KinectSensor.SkeletonEngine.Enable()</value>
  </data>
  <data name="ElevationIncorrect" xml:space="preserve">
    <value>Elevation angle must be between Elevation Minimum/Maximum</value>
  </data>
  <data name="SkeletonBufferIncorrectLength" xml:space="preserve">
    <value>The data buffer must have length equal to SkeletonArrayLength.</value>
  </data>
  <data name="GenericException" xml:space="preserve">
    <value>This API has returned an exception from an HRESULT: 0x{0:X}</value>
  </data>
  <data name="ImageFrameNotDisposed" xml:space="preserve">
    <value>Warning: An ImageFrame instance was not Disposed.</value>
  </data>
</root>